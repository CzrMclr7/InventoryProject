// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using InventoryProject.DataAccess.DataContextModels;
using Microsoft.EntityFrameworkCore;

namespace InventoryProject.DataAccess.DataContext;

public partial class InventoryProjectDatabaseContext : DbContext
{
    public InventoryProjectDatabaseContext(DbContextOptions<InventoryProjectDatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductAdjustment> ProductAdjustments { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<SalesDetail> SalesDetails { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAccess> UserAccesses { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.DateCreated).HasDefaultValueSql("GETDATE()");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<ProductAdjustment>(entity =>
        {
            entity.ToTable("ProductAdjustment");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("GETDATE()");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductAdjustments)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductAdjusment_Products");

            entity.HasOne(d => d.SalesDetail).WithMany(p => p.ProductAdjustments)
                .HasForeignKey(d => d.SalesDetailId)
                .HasConstraintName("FK_ProductAdjusment_SalesDetail");
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.Property(e => e.DateCreated).HasDefaultValueSql("GETDATE()");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<SalesDetail>(entity =>
        {
            entity.ToTable("SalesDetail");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("GETDATE()");
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Product).WithMany(p => p.SalesDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesDetail_Products");

            entity.HasOne(d => d.Sales).WithMany(p => p.SalesDetails)
                .HasForeignKey(d => d.SalesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesDetail_Sales");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.LastName).HasMaxLength(50);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PasswordSalt)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ProfilePicture).HasMaxLength(255);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UserAccess>(entity =>
        {
            entity.ToTable("UserAccess");

            entity.Property(e => e.ModuleId)
                .HasMaxLength(10)
                .IsFixedLength();

            entity.HasOne(d => d.User).WithMany(p => p.UserAccesses)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAccess_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}